/***********************************************\

   #EVOLVE CSS MIXINS

\***********************************************/

// Credit: inuit CSS


// Create a fully formed type style (sizing and vertical rhythm) by passing in a
// single value, e.g.:
//
// .foo {
//     @include e-font-size(12px);
// }
//
// This will generate a rem-based font-size with its pixel fallback, as well as
// a unitless line-height which will place the element on your baseline, e.g.:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
//     line-height: 2;
// }
//
// If you do not want to generate a line-height automatically, you
// simply pass in your own as a second paramater:
//
// .foo {
//     @include e-font-size(12px, 1.5);
// }
//
// This will yield:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
//     line-height: 1.5;
// }
//
// This parameter can be any integer, ‘inherit’, or ‘normal’. If you don’t want
// a line-height at all, pass in a second paramater of ‘none’ or ‘false’:
//
// .foo {
//     @include e-font-size(12px, none);
// }
//
// This will yield:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
// }

@mixin e-font-size($font-size, $line-height: auto) {
    font-size: $font-size;
    font-size: ($font-size / $e-base-font-size) * 1rem;

    @if $line-height == auto {
        line-height: ceil($font-size / $e-base-line-height) * ($e-base-line-height / $font-size);
    }

    @else {

        @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
            line-height: $line-height;
        }

        @elseif ($line-height != none and $line-height != false) {
            @warn "D’oh! ‘#{$line-height}’ is not a valid value for `line-height`."
        }

    }

}


// Apply ‘attention’ styles in one go.
@mixin e-attention($self: false) {

    @if($self != false) {

        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }

    }

    @else {

        &:hover,
        &:active,
        &:focus {
            @content;
        }

    }

}


// Create all specified heading styles in one go.
@mixin e-headings($from: 1, $to: 6) {

    %base-heading {
        @content;
    }

    @if $from >= 1 and $to <= 6{

        @for $i from $from through $to{

            h#{$i} {
                @extend %base-heading;
            }

        }

    }

}
 
// Prints value in px and in rem
@mixin e-rem-fallback($property, $values) {
  #{$property}: $values; 
  #{$property}: e-rem-calc($values);; 
}




///*------------------------------------*\
//    #TOOLS-RESPONSIVE
//\*------------------------------------*/


// A simple mixin to quickly generate whole media queries from the aliases and
// conditions defined in `_e-globals.scss`.
//
// Usage:
//
// .foo {
//     color: green;
//
//     @include e-media-query(palm) {
//         color: red;
//     }
//
// }

@mixin e-media-query($mq) {

    $breakpoint-found: false;

    // Loop through the list of breakpoints we’ve provided in our settings file.
    @each $breakpoint in $e-breakpoints {

        // Grab the alias and the condition from their respective locations in
        // the list.
        $alias:     nth($breakpoint, 1);
        $condition: nth($breakpoint, 2);

        // If the media query we’ve specified has an alias and a condition...
        @if $mq == $alias and $condition {

            // ...tell the mixin that we’ve found it...
            $breakpoint-found: true;

            // ...and spit it out here.
            @media #{$condition} {
                @content;
            }

        }

    }

    // If the user specifies a non-exitent alias, send them a warning.
    @if $breakpoint-found == false{
        @warn "Oops! Breakpoint ‘#{$mq}’ does not exist."
    }

}
